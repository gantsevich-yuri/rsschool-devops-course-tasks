pipeline {
    triggers {
        pollSCM('H/1 * * * *') 
    }

    agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              serviceAccountName: jenkins
              containers:
                - name: jnlp
                  image: jenkins/inbound-agent:3309.v27b_9314fd1a_4-6

                - name: python
                  image: python:3.13
                  command: ["cat"]
                  tty: true

                - name: docker
                  image: docker:28
                  command: ["cat"]
                  tty: true
                  volumeMounts:
                    - name: docker-sock
                      mountPath: /var/run/docker.sock
                - name: helm
                  image: lachlanevenson/k8s-helm:v3.10.2
                  command: ["cat"]
                  tty: true
              volumes:
                - name: docker-sock
                  hostPath:
                    path: /var/run/docker.sock
                    type: Socket
            """
        }
    }

    stages {
        stage('Checkout') {
            steps {
                git(
                    url: 'https://github.com/gantsevich-yuri/rsschool-devops-course-tasks.git',
                    branch: 'task_7',
                    credentialsId: 'github-token'
                )
            }
        }
        /*
        stage('Build App') {
            steps {
                container('python') {
                    sh 'pip install -r deployment/my-app/requirements.txt --break-system-packages'
                }
            }
        }

        stage('Test App') {
            steps {
                container('python') {
		            dir('deployment/my-app') {
                        sh 'pytest test.py'
	                }
                }
            }
        }
        
        stage('SonarQube test App') {
            steps {
                container('python') {
                    withSonarQubeEnv('jenkins-sonar') {
                        sh '''
                            apt-get update -qq && apt-get install -y --no-install-recommends unzip wget openjdk-17-jre-headless
                            wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
                            unzip -q sonar-scanner-cli-*.zip
                            mv sonar-scanner-5.0.1.3006-linux sonar-scanner
                            export PATH=$PWD/sonar-scanner/bin:$PATH
                            sonar-scanner \
                                -Dsonar.projectKey=jenkins-sonar \
                                -Dsonar.sources=deployment/my-app
                        '''
                    }
                }
            }
        }
        
        stage('Docker biuld and push to Nexus registry') {
            steps {
                container('docker') {
		            dir('deployment/my-app') {
                        script {
                            def nexus_srv = '158.160.55.161:8082'
                            def nexus_repo = 'myrepo'
                            def image = "${nexus_srv}/${nexus_repo}/my-flask-app"

                            sh "docker build -t ${image} ."
                            sh "echo 'P@ssw0rd_123' | docker login http://${nexus_srv} --username admin --password-stdin"
                            sh "docker push ${image}"
                        }
		            }
                }
            }
        }
        
        stage('Install Helm') {
            steps {
                sh '''
                curl -LO https://get.helm.sh/helm-v3.18.4-linux-amd64.tar.gz
                tar -zxvf helm-v3.18.4-linux-amd64.tar.gz
                mv linux-amd64/helm ./helm
                chmod +x ./helm
                '''
            }
        }
        
        stage('Deploy App to minikube from registry') {
            steps {
                sh """
                    ./helm upgrade --install release-1 ./deployment/my-chart \
                        --namespace jenkins \
                        --set image.repository=158.160.55.161:8082/myrepo/my-flask-app \
                        --set image.pullPolicy=IfNotPresent \
                        --set image.pullSecrets[0].name=regcred
                """
            }
        }
        stage('Verify App') {
            steps {
                sh 'curl -v http://192.168.49.2:30081/'
            }
        }
        */
        stage('Add Helm Repos') {
            steps {
                container('helm') {
                    sh '''
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                    helm repo add grafana https://grafana.github.io/helm-charts
                    helm repo update
                    '''
                }
            }
        }

        stage('Deploy Prometheus') {
            steps {
                container('helm') {
                    dir('deployment/monitoring') {
                        sh '''
                        helm upgrade --install my-prometheus prometheus-community/prometheus \
                        --namespace jenkins \
                        --create-namespace \
                        --values prometheus-values.yaml
                        '''
                    }
                }
            }
        }

        stage('Deploy Grafana') {
            steps {
                container('helm') {
                    dir('deployment/monitoring') {
                        sh '''
                        helm upgrade --install my-grafana grafana/grafana \
                        --namespace jenkins \
                        --values grafana-values.yaml
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                withCredentials([
                    string(credentialsId: 'TELEGRAM_BOT_TOKEN', variable: 'BOT_TOKEN'),
                    string(credentialsId: 'TELEGRAM_CHAT_ID', variable: 'CHAT_ID')
                ]) {
                    sh """
                        curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                            -d chat_id=${CHAT_ID} \
                            -d text="✅ App successfully deployed!"
                    """
                }
            }
        }

        failure {
            script {
                withCredentials([
                    string(credentialsId: 'TELEGRAM_BOT_TOKEN', variable: 'BOT_TOKEN'),
                    string(credentialsId: 'TELEGRAM_CHAT_ID', variable: 'CHAT_ID')
                ]) {
                    sh """
                        curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                            -d chat_id=${CHAT_ID} \
                            -d text="❌ Error deploy App!"
                    """
                }
            }
        }
    }
}